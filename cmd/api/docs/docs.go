// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dns_logs/{dnsRecordId}": {
            "get": {
                "description": "Retrieve all logs related to a specific DNS record",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSLogs"
                ],
                "summary": "Get DNS logs for a record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DNS Record ID",
                        "name": "dnsRecordId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.DNSLog"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dns_records": {
            "get": {
                "description": "Retrieve a list of all DNS records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSRecords"
                ],
                "summary": "Get all DNS records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.DNSRecord"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new DNS record and logs the creation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSRecords"
                ],
                "summary": "Create a new DNS record",
                "parameters": [
                    {
                        "description": "DNS Record",
                        "name": "dnsRecord",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DNSRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.DNSRecord"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dns_records/{id}": {
            "get": {
                "description": "Retrieve a specific DNS record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSRecords"
                ],
                "summary": "Get a DNS record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "DNS Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.DNSRecord"
                        }
                    },
                    "404": {
                        "description": "DNS record not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing DNS record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSRecords"
                ],
                "summary": "Update a DNS record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "DNS Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "DNS Record Update",
                        "name": "dnsRecord",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DNSRecordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.DNSRecord"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "DNS record not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a DNS record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DNSRecords"
                ],
                "summary": "Delete a DNS record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "DNS Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "DNS record not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.DNSProvider": {
            "type": "string",
            "enum": [
                "NameCheap",
                "GoDaddy",
                "Google"
            ],
            "x-enum-varnames": [
                "NameCheap",
                "GoDaddy",
                "Google"
            ]
        },
        "dto.DNSLog": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "newValue": {
                    "type": "string"
                },
                "oldValue": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "dto.DNSRecord": {
            "type": "object",
            "properties": {
                "dnsProvider": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "recordName": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                }
            }
        },
        "dto.DNSRecordRequest": {
            "type": "object",
            "properties": {
                "dnsProvider": {
                    "$ref": "#/definitions/database.DNSProvider"
                },
                "domain": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "recordName": {
                    "type": "string"
                },
                "recordType": {
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
